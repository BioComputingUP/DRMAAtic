# Generated by Django 4.2.5 on 2023-09-27 13:18

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('has_full_access', models.BooleanField(default=False)),
                ('throttling_rate_burst', models.CharField(default='10/s', max_length=30)),
                ('throttling_rate_sustained', models.CharField(default='100/day', max_length=30)),
                ('execution_token_max_amount', models.IntegerField(default=100)),
                ('token_renewal_time', models.CharField(default='1 day', max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('update_date', models.DateTimeField(auto_created=True, auto_now=True)),
                ('creation_date', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('_job_description', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('_sender_ip_addr', models.GenericIPAddressField(blank=True, default=None, null=True)),
                ('_files_name', models.JSONField(blank=True, default=dict)),
                ('_status', models.CharField(choices=[('job has been rejected from the ws', 'Rejected'), ('job has been received from the ws', 'Received'), ('job has been created and sent to the DRM', 'Created'), ('process status cannot be determined', 'Undetermined'), ('job is queued and active', 'Queued Active'), ('job is queued and in system hold', 'System On Hold'), ('job is queued and in user hold', 'User On Hold'), ('job is queued and in user and system hold', 'User System On Hold'), ('job is running', 'Running'), ('job is system suspended', 'System Suspended'), ('job is user suspended', 'User Suspended'), ('job finished normally', 'Done'), ('job finished, but failed', 'Failed')], default='job has been received from the ws', max_length=200)),
                ('deleted', models.BooleanField(default=False)),
                ('_drm_job_id', models.PositiveIntegerField(blank=True, null=True)),
                ('dependency_type', models.CharField(blank=True, choices=[('afterany', 'After Any'), ('afterok', 'After Ok'), ('afternotok', 'After Not Ok')], default=None, max_length=20, null=True)),
                ('dependencies', models.ManyToManyField(blank=True, related_name='dependents', to='drmaatic.job')),
                ('parent_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='drmaatic.job')),
            ],
            options={
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='Queue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('max_cpu', models.PositiveIntegerField(default=16, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(64)], verbose_name='Maximum CPUs')),
                ('max_mem', models.PositiveIntegerField(default=1024, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(96000)], verbose_name='Maximum memory (MB)')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(choices=[('ORCID', 'ORCID'), ('INTERNAL', 'INTERNAL')], max_length=50)),
                ('username', models.CharField(max_length=100)),
                ('name', models.CharField(blank=True, max_length=20, null=True)),
                ('surname', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=100, null=True)),
                ('active', models.BooleanField(default=True)),
                ('token_renewal_time', models.CharField(blank=True, max_length=40, null=True)),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='drmaatic.group')),
            ],
            options={
                'unique_together': {('source', 'username')},
            },
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hash', models.CharField(max_length=1000)),
                ('created', models.DateTimeField()),
                ('expires', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='has_user', to='drmaatic.user')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('command', models.CharField(max_length=500)),
                ('required_tokens', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('_max_clock_time', models.CharField(default='3 hours', max_length=100)),
                ('is_array', models.BooleanField(default=False)),
                ('begin_index', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('end_index', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('step_index', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('cpus', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='CPUs per task')),
                ('mem', models.PositiveIntegerField(default=256, validators=[django.core.validators.MinValueValidator(256)], verbose_name='Memory per task (MB)')),
                ('is_output_visible', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, related_name='groups', to='drmaatic.group')),
                ('queue', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='drmaatic.queue')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Parameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('flag', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('type', models.CharField(blank=True, choices=[('int', 'Integer'), ('float', 'Float'), ('string', 'String'), ('bool', 'Bool'), ('file', 'File')], default='string', max_length=100)),
                ('default', models.CharField(blank=True, max_length=1000)),
                ('description', models.CharField(blank=True, default='', max_length=300)),
                ('private', models.BooleanField(default=False)),
                ('required', models.BooleanField(default=True)),
                ('task', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='param', to='drmaatic.task')),
            ],
        ),
        migrations.CreateModel(
            name='JobParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(max_length=5000)),
                ('job', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='params', to='drmaatic.job')),
                ('param', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drmaatic.parameter')),
            ],
        ),
        migrations.AddField(
            model_name='job',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drmaatic.task', to_field='name'),
        ),
        migrations.AddField(
            model_name='job',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='drmaatic.user'),
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'admin',
                'verbose_name_plural': 'admins',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='parameter',
            constraint=models.UniqueConstraint(fields=('name', 'task'), name='param_name'),
        ),
    ]
